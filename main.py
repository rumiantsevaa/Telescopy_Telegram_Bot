import os
import telebot
from config import *
from telebot import types
import subprocess
from datetime import datetime

init_usage_db()

class AccessDeniedError(Exception):
    pass

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def check_access(message) -> bool:
    """
    Centralized user access check
    Combines all restrictions: anti-fraud measures, limits
    """
    try:
        if not anti_fraud_validation(message):
            print("[access] FAIL: anti_fraud_validation")
            raise AccessDeniedError("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        if not if_trusted_user(message):
            print("[access] FAIL: if_trusted_user")
            raise AccessDeniedError("–í —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        if not check_usage_limit(message.from_user.id):
            print("[access] FAIL: check_usage_limit")
            raise AccessDeniedError("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (1 –≤ —Å—É—Ç–∫–∏).")

        print("[access] PASS")
        return True

    except Exception as e:
        bot.reply_to(message, str(e))
        return False

@bot.message_handler(commands=['start'])
def start_handler(message):
    if not check_access(message):
        return

    bot.send_message(
        chat_id=message.chat.id,
        text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —è –±–æ—Ç @TelescopyRBot –∏ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ—á–∫–∏ ‚≠ïÔ∏è'
             ' –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
    bot.register_next_step_handler(message, handle_video)

@bot.message_handler(commands=['help'])
def help_handler(message):
    if not check_access(message):
        return
    bot.send_message(chat_id=message.chat.id,
                     text='–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è. '
                          '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚åõÔ∏è\n'
                          '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://github.com/rumiantsevaa/Telescopy_Telegram_Bot')
    bot.register_next_step_handler(message, handle_video)

@bot.message_handler(content_types=['video'])
def handle_video(message):
    chat_id = message.chat.id
    if not check_access(message):
        return
    if not message.video:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ üìº")
        return

    file_id = message.video.file_id
    video = message.video
    duration = video.duration
    video_w = video.width
    video_h = video.height

    if duration > 60:
        bot.send_message(chat_id, "–í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã, –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥.")

    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    file_absolute_path = os.path.join(video_storage, file_info.file_path)
    os.makedirs(os.path.dirname(file_absolute_path), exist_ok=True)

    with open(file_absolute_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.reply_to(message, "–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")

    input_file = file_absolute_path
    output_file = os.path.join(os.path.dirname(input_file), f"output_{os.path.basename(input_file)}")

    try:
        cut_duration = min(duration, 60)

        if video_w > 512 and video_h > 512:
            cmd = f'ffmpeg -y -i "{input_file}" -vf "crop=512:512" -t {cut_duration} -c:v libx264 -c:a copy "{output_file}"'
        else:
            bot.send_message(chat_id, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–∫–∞–∂–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
            filter_cmd = "crop='min(iw,ih)':'min(iw,ih)',scale=512:512"
            cmd = f'ffmpeg -y -i "{input_file}" -vf "{filter_cmd}" -t {cut_duration} -c:v libx264 -c:a copy "{output_file}"'

        subprocess.run(cmd, shell=True, check=True)

        with open(output_file, 'rb') as video_file:
            bot.send_video_note(
                chat_id,
                video_file,
                duration=59,
                length=512
            )
        register_usage(message.from_user.id)

    except subprocess.CalledProcessError as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists(input_file):
            os.remove(input_file)
        if os.path.exists(output_file):
            os.remove(output_file)

    continue_handler(message)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if not check_access(message):
        return
    if message.text == '/start':
        start_handler(message)
    elif message.text == '/help':
        help_handler(message)
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def continue_handler(message):
    bot.send_message(chat_id=message.chat.id,
                     text="–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"[ERROR] {e}")
