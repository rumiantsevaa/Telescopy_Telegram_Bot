import os
import telebot
from config import *
from telebot import types
import subprocess
from datetime import datetime

init_usage_db()

class AccessDeniedError(Exception):
    pass

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def check_access(message) -> bool:
    """
    Centralized user access check
    Combines all restrictions: anti-fraud measures, limits
    """
    try:
        if not anti_fraud_validation(message):
            print("[access] FAIL: anti_fraud_validation")
            raise AccessDeniedError("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        if not if_trusted_user(message):
            print("[access] FAIL: if_trusted_user")
            raise AccessDeniedError("–í —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        if not check_usage_limit(message.from_user.id):
            print("[access] FAIL: check_usage_limit")
            raise AccessDeniedError("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (1 –≤ —Å—É—Ç–∫–∏).")

        print("[access] PASS")
        return True

    except Exception as e:
        bot.reply_to(message, str(e))
        return False

@bot.message_handler(commands=['start'])
def start_handler(message):
    if not check_access(message):
        return

    bot.send_message(
        chat_id=message.chat.id,
        text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —è –±–æ—Ç @TelescopyRBot –∏ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å –∫—Ä—É–∂–æ—á–∫–∏ ‚≠ïÔ∏è'
             ' –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
    bot.register_next_step_handler(message, handle_video)

@bot.message_handler(commands=['help'])
def help_handler(message):
    if not check_access(message):
        return
    bot.send_message(chat_id=message.chat.id,
                     text='–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è. '
                          '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚åõÔ∏è\n'
                          '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://github.com/rumiantsevaa/Telescopy_Telegram_Bot')
    bot.register_next_step_handler(message, handle_video)

@bot.message_handler(content_types=['video'])
def handle_video(message):
    chat_id = message.chat.id
    if not check_access(message):
        return
    if not message.video:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ üìº")
        return

    video = message.video
    duration = video.duration
    video_w = video.width
    video_h = video.height
    file_size = video.file_size

    MAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100 MB
    if file_size > MAX_VIDEO_SIZE:
        bot.send_message(chat_id, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 100 –ú–ë.")
        return

    if duration > 60:
        bot.send_message(chat_id, "–í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã, –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    file_info = bot.get_file(video.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—É—Ç–∏
    import secrets
    safe_name = secrets.token_hex(8) + ".mp4"
    input_file = os.path.join(video_storage, safe_name)
    output_file = os.path.join(video_storage, "output_" + safe_name)

    os.makedirs(video_storage, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(input_file, 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.reply_to(message, "–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")

    try:
        cut_duration = min(duration, 60)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        if video_w > 512 and video_h > 512:
            vf_filter = "crop=512:512"
        else:
            bot.send_message(chat_id, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–∫–∞–∂–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
            vf_filter = "crop='min(iw,ih)':'min(iw,ih)',scale=512:512"

        cmd = [
            "ffmpeg", "-y",
            "-i", input_file,
            "-vf", vf_filter,
            "-t", str(cut_duration),
            "-c:v", "libx264",
            "-c:a", "copy",
            output_file
        ]

        subprocess.run(cmd, check=True)

        with open(output_file, 'rb') as video_file:
            bot.send_video_note(
                chat_id,
                video_file,
                duration=59,
                length=512
            )

        register_usage(message.from_user.id)

    except subprocess.CalledProcessError as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for f in [input_file, output_file]:
            try:
                if os.path.exists(f):
                    os.remove(f)
            except Exception as cleanup_error:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {f} ‚Äî {cleanup_error}")

    continue_handler(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if not check_access(message):
        return
    if message.text == '/start':
        start_handler(message)
    elif message.text == '/help':
        help_handler(message)
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def continue_handler(message):
    bot.send_message(chat_id=message.chat.id,
                     text="–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"[ERROR] {e}")
